/**
 * Copyright (c) 2024, WSO2 LLC. (https://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
import { smsProvidersNS } from "../../../models";

export const smsProviders: smsProvidersNS = {
    confirmationModal: {
        assertionHint: "Please confirm your action.",
        content: "If you delete this configuration, you will not receive SMS." +
            "Please proceed with caution.",
        header: "Are you sure?",
        message: "This action is irreversible and will permanently delete the SMS provider configurations."
    },
    dangerZoneGroup: {
        header: "Danger Zone",
        revertConfig: {
            actionTitle: "Delete",
            heading: "Delete Configurations",
            subHeading: "This action will delete sms provider configurations. " +
                "Once deleted, you will not receive SMS."
        }
    },
    description: "Configure the SMS provider settings according to your SMS provider.",
    form: {
        custom: {
            contentType: {
                hint: "The content type of the API request. Accepted values are 'FORM' or 'JSON'",
                label: "Content Type",
                placeholder: "JSON"
            },
            headers: {
                hint: "Comma seperated list of HTTP headers to be included in the SMS API request.",
                label: "Headers",
                placeholder: "authorisation: Bearer {{token}}"
            },
            httpMethod: {
                hint: "The HTTP method of the API request. (Default is POST)",
                label: "HTTP Method",
                placeholder: "POST"
            },
            key: {
                hint: "Any authentication key that needs to be send as HTTP header.",
                label: "SMS Provider Auth Key",
                placeholder: "Enter the SMS provider auth key"
            },
            payload: {
                hint: "The payload template of the API request. Use {{body}} to represent the generated " +
                        "SMS body. Use {{mobile}} to represent the mobile number.",
                label: "Payload Template",
                placeholder: "{\"content\": {{body}}, \"to\": {{mobile}} }"
            },
            providerName: {
                hint: "The name of the SMS provider.",
                label: "SMS Provider Name",
                placeholder: "Enter the SMS provider name"
            },
            providerUrl: {
                hint: "The URL of the SMS provider.",
                label: "SMS Provider URL",
                placeholder: "Enter the sms provider URL"
            },
            secret: {
                hint: "Any authentication secret that needs to be send as HTTP header.",
                label: "SMS Provider Auth Secret",
                placeholder: "Enter the SMS provider auth secret"
            },
            sender: {
                hint: "The SMS senders identification (phone number or name).",
                label: "Sender",
                placeholder: "Enter the sender"
            },
            subHeading: "Custom Settings",
            validations: {
                contentTypeInvalid: "The content type is invalid",
                methodInvalid: "The HTTP method is invalid",
                required: "This field cannot be empty"
            }
        },
        twilio: {
            accountSID: {
                hint: "Twilio account string identifier which act as username for the account",
                label: "Twilio Account SID",
                placeholder: "Enter the Twilio account SID"
            },
            authToken: {
                hint: "The access token generated by the Twilio auth server ",
                label: "Twilio Auth Token",
                placeholder: "Enter the Twilio auth token"
            },
            sender: {
                hint: "Alphanumeric value to identify the sender (Refer to the provider documentation).",
                label: "Sender ID",
                placeholder: "Enter the sender ID"
            },
            subHeading: "Twilio Settings",
            validations: {
                required: "This field cannot be empty"
            }
        },
        vonage: {
            accountSID: {
                hint: "Vonage API Key which act as username for the account.",
                label: "Vonage API Key",
                placeholder: "Enter the Vonage API key"
            },
            authToken: {
                hint: "The API Secret generated by the Vonage auth server.",
                label: "Vonage API Secret",
                placeholder: "Enter the Vonage API Secret"
            },
            sender: {
                hint: "Alphanumeric value to identify the sender (Refer to the provider documentation).",
                label: "Sender ID",
                placeholder: "Enter the sender ID"
            },
            subHeading: "Vonage Settings",
            validations: {
                required: "This field cannot be empty"
            }
        }
    },
    goBack: "Go back to Email & SMS",
    heading: "SMS Provider",
    info: "You can customize the SMS content using <1>SMS Templates</1>.",
    notifications: {
        deleteConfiguration: {
            error: {
                description: "Error deleting the sms provider configurations.",
                message: "Error Occurred"
            },
            success: {
                description: "Successfully reverted the sms provider configurations.",
                message: "Revert Successful"
            }
        },
        getConfiguration: {
            error: {
                description: "Error retrieving the sms provider configurations.",
                message: "Error Occurred"
            }
        },
        updateConfiguration: {
            error: {
                description: "Error updating the sms provider configurations.",
                message: "Error Occurred"
            },
            success: {
                description: "Successfully updated the sms provider configurations.",
                message: "Update Successful"
            }
        }
    },
    sendTestSMSButton: "Send Test SMS",
    subHeading: "Configure a SMS provider to send SMS to your users.",
    updateButton: "Update"
};
